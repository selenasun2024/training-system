import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupOrphanedData() {
  try {
    console.log('üîç Ê£ÄÊü•Êï∞ÊçÆÂ∫ì‰∏ÄËá¥ÊÄß...\n');

    // 1. Ê£ÄÊü•Â≠§ÂÑøÂàÜÁªÑÔºàÊåáÂêë‰∏çÂ≠òÂú®È°πÁõÆÁöÑÂàÜÁªÑÔºâ
    const allGroups = await prisma.trainingGroup.findMany({
      include: {
        project: true,
        _count: {
          select: {
            members: true
          }
        }
      }
    });

    const orphanedGroups = allGroups.filter(group => !group.project);

    console.log(`üóëÔ∏è  ÊâæÂà∞ ${orphanedGroups.length} ‰∏™Â≠§ÂÑøÂàÜÁªÑÔºàÊåáÂêë‰∏çÂ≠òÂú®ÁöÑÈ°πÁõÆÔºâ:`);
    orphanedGroups.forEach(group => {
      console.log(`  - ÂàÜÁªÑ ${group.name} (${group.id}) -> È°πÁõÆID: ${group.projectId}, ÊàêÂëòÊï∞: ${group._count.members}`);
    });

    // 2. Ê£ÄÊü•Â≠òÂú®ÁöÑÈ°πÁõÆ
    const existingProjects = await prisma.trainingProject.findMany({
      select: {
        id: true,
        name: true
      }
    });

    console.log(`\nüìÇ Áé∞Â≠òÈ°πÁõÆ ${existingProjects.length} ‰∏™:`);
    existingProjects.forEach(project => {
      console.log(`  - ${project.name} (${project.id})`);
    });

    // 3. Ê£ÄÊü•ÂÜØËäπÁöÑËæÖÂØºÂëòÊï∞ÊçÆ
    console.log(`\nüë©‚Äçüè´ Ê£ÄÊü•ÂÜØËäπÁöÑËæÖÂØºÂëòÊï∞ÊçÆ:`);
    const fengqinCounseling = await prisma.groupMember.findMany({
      where: {
        userId: 'user-hr-001',
        role: 'LEADER'
      },
      include: {
        group: {
          include: {
            project: {
              select: {
                id: true,
                name: true,
                status: true
              }
            }
          }
        },
        user: {
          select: {
            name: true,
            username: true
          }
        }
      }
    });

    console.log(`  ÂÜØËäπ‰Ωú‰∏∫ËæÖÂØºÂëòÁöÑÂàÜÁªÑ: ${fengqinCounseling.length} ‰∏™`);
    fengqinCounseling.forEach(record => {
      const project = record.group.project;
      console.log(`    - ÂàÜÁªÑ: ${record.group.name} (${record.group.id})`);
      console.log(`      È°πÁõÆ: ${project ? `${project.name} (${project.id}) - ${project.status}` : '‚ùå È°πÁõÆ‰∏çÂ≠òÂú®'}`);
    });

    // 4. Ê∏ÖÁêÜÂ≠§ÂÑøÊï∞ÊçÆÔºàÂ¶ÇÊûúÁî®Êà∑Á°ÆËÆ§Ôºâ
    if (orphanedGroups.length > 0) {
      console.log(`\nüßπ ÂáÜÂ§áÊ∏ÖÁêÜ ${orphanedGroups.length} ‰∏™Â≠§ÂÑøÂàÜÁªÑ...`);
      
      // È¶ñÂÖàÂà†Èô§Â≠§ÂÑøÂàÜÁªÑÁöÑÊàêÂëò
      for (const group of orphanedGroups) {
        const deletedMembers = await prisma.groupMember.deleteMany({
          where: {
            groupId: group.id
          }
        });
        console.log(`  ‚úÖ Âà†Èô§ÂàÜÁªÑ ${group.name} ÁöÑ ${deletedMembers.count} ‰∏™ÊàêÂëò`);
      }

      // ÁÑ∂ÂêéÂà†Èô§Â≠§ÂÑøÂàÜÁªÑ
      const deletedGroups = await prisma.trainingGroup.deleteMany({
        where: {
          id: {
            in: orphanedGroups.map(g => g.id)
          }
        }
      });
      console.log(`  ‚úÖ Âà†Èô§‰∫Ü ${deletedGroups.count} ‰∏™Â≠§ÂÑøÂàÜÁªÑ`);
    }

    // 5. ÈáçÊñ∞Ê£ÄÊü•ÂÜØËäπÁöÑÊï∞ÊçÆ
    console.log(`\nüîÑ ÈáçÊñ∞Ê£ÄÊü•ÂÜØËäπÁöÑËæÖÂØºÂëòÊï∞ÊçÆ:`);
    const fengqinAfterCleanup = await prisma.groupMember.findMany({
      where: {
        userId: 'user-hr-001',
        role: 'LEADER'
      },
      include: {
        group: {
          include: {
            project: {
              select: {
                id: true,
                name: true,
                status: true
              }
            }
          }
        }
      }
    });

    console.log(`  Ê∏ÖÁêÜÂêéÔºåÂÜØËäπ‰Ωú‰∏∫ËæÖÂØºÂëòÁöÑÊúâÊïàÂàÜÁªÑ: ${fengqinAfterCleanup.length} ‰∏™`);
    fengqinAfterCleanup.forEach(record => {
      const project = record.group.project;
      console.log(`    - ÂàÜÁªÑ: ${record.group.name}`);
      console.log(`      È°πÁõÆ: ${project.name} (${project.id}) - ${project.status}`);
    });

    // 6. È™åËØÅÊàëÁöÑÊü•ËØ¢ÈÄªËæë
    console.log(`\nüîç È™åËØÅËé∑ÂèñÈ°πÁõÆÁöÑÊü•ËØ¢ÈÄªËæë:`);
    const counselorGroups = await prisma.groupMember.findMany({
      where: {
        userId: 'user-hr-001',
        role: 'LEADER'
      },
      include: {
        group: {
          select: {
            projectId: true
          }
        }
      }
    });

    const projectIds = counselorGroups.map(group => group.group.projectId);
    console.log(`  ÂÜØËäπË¥üË¥£ÁöÑÈ°πÁõÆID: [${projectIds.join(', ')}]`);

    const projects = await prisma.trainingProject.findMany({
      where: {
        id: {
          in: projectIds
        }
      },
      select: {
        id: true,
        name: true,
        projectNo: true,
        status: true,
        currentStage: true
      }
    });

    console.log(`  Â∫îËØ•ËøîÂõûÁöÑÈ°πÁõÆ: ${projects.length} ‰∏™`);
    projects.forEach(project => {
      console.log(`    - ${project.name} (${project.id}) - ${project.status}`);
    });

  } catch (error) {
    console.error('‚ùå Êìç‰ΩúÂ§±Ë¥•:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupOrphanedData(); 