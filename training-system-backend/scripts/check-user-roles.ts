import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkUserRoles() {
  try {
    console.log('üîç Êü•ËØ¢Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁî®Êà∑ÂíåËßíËâ≤Êï∞ÊçÆ...\n');

    // Êü•ËØ¢ÊâÄÊúâÁî®Êà∑
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        username: true,
        userRoles: {
          where: {
            status: 'ACTIVE',
            revokedAt: null,
          },
          select: {
            roleName: true,
          },
        },
      },
    });

    console.log(`üìä ÊÄªÂÖ±ÊâæÂà∞ ${users.length} ‰∏™Áî®Êà∑:\n`);

    users.forEach((user, index) => {
      const roles = user.userRoles.map(ur => ur.roleName).join(', ');
      console.log(`${index + 1}. ${user.name} (${user.username})`);
      console.log(`   ËßíËâ≤: ${roles || 'Êó†ËßíËâ≤'}`);
      console.log('');
    });

    // ‰∏ìÈó®Êü•ËØ¢ËæÖÂØºÂëò
    const counselors = await prisma.user.findMany({
      where: {
        userRoles: {
          some: {
            roleName: 'counselor',
            status: 'ACTIVE',
            revokedAt: null,
          },
        },
      },
      select: {
        id: true,
        name: true,
        username: true,
      },
    });

    console.log(`\nüë®‚Äçüè´ ËæÖÂØºÂëòÁî®Êà∑Êï∞Èáè: ${counselors.length}`);
    counselors.forEach((counselor, index) => {
      console.log(`${index + 1}. ${counselor.name} (${counselor.username})`);
    });

  } catch (error) {
    console.error('‚ùå Êü•ËØ¢Â§±Ë¥•:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserRoles(); 